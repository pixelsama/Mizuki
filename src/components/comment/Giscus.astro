---
import { commentConfig } from "@/config";

interface Props {
	path: string;
}

const { path } = Astro.props;
const giscusConfig = commentConfig?.giscus;

if (!giscusConfig) {
	throw new Error("Giscus config is required");
}

const {
	repo,
	repoId,
	category,
	categoryId,
	mapping = "pathname",
	strict = false,
	reactionsEnabled = true,
	emitMetadata = false,
	inputPosition = "bottom",
	theme = "preferred_color_scheme",
	lang = "zh-CN",
	loading = "lazy",
} = giscusConfig;
---

<div id="giscus-container"></div>

<script
	is:inline
	define:vars={{
		repo,
		repoId,
		category,
		categoryId,
		mapping,
		strict,
		reactionsEnabled,
		emitMetadata,
		inputPosition,
		theme,
		lang,
		loading,
	}}
>
	function loadGiscus() {
		const script = document.createElement("script");
		script.src = "https://giscus.app/client.js";
		script.setAttribute("data-repo", repo);
		script.setAttribute("data-repo-id", repoId);
		script.setAttribute("data-category", category);
		script.setAttribute("data-category-id", categoryId);
		script.setAttribute("data-mapping", mapping);
		script.setAttribute("data-strict", strict ? "1" : "0");
		script.setAttribute(
			"data-reactions-enabled",
			reactionsEnabled ? "1" : "0",
		);
		script.setAttribute("data-emit-metadata", emitMetadata ? "1" : "0");
		script.setAttribute("data-input-position", inputPosition);
		script.setAttribute("data-theme", theme);
		script.setAttribute("data-lang", lang);
		script.setAttribute("data-loading", loading);
		script.crossOrigin = "anonymous";
		script.async = true;

		const container = document.getElementById("giscus-container");
		if (container) {
			container.appendChild(script);
		}
	}

	// 支持主题切换
	function updateGiscusTheme() {
		const isDark = document.documentElement.classList.contains("dark");
		const giscusTheme = isDark ? "dark" : "light";

		const iframe = document.querySelector(
			"iframe.giscus-frame",
		) as HTMLIFrameElement;
		if (iframe) {
			iframe.contentWindow?.postMessage(
				{ giscus: { setConfig: { theme: giscusTheme } } },
				"https://giscus.app",
			);
		}
	}

	// 监听主题变化
	const observer = new MutationObserver((mutations) => {
		mutations.forEach((mutation) => {
			if (
				mutation.type === "attributes" &&
				mutation.attributeName === "class"
			) {
				updateGiscusTheme();
			}
		});
	});

	observer.observe(document.documentElement, {
		attributes: true,
		attributeFilter: ["class"],
	});

	// 页面加载时初始化
	if (document.readyState === "loading") {
		document.addEventListener("DOMContentLoaded", loadGiscus);
	} else {
		loadGiscus();
	}

	// 清理
	document.addEventListener("astro:before-swap", () => {
		observer.disconnect();
	});
</script>

<style>
	#giscus-container {
		margin-top: 1rem;
	}
</style>
